<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F08%2F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[#预警微服务集群部署手册 准备工作 文件检查 1234/tar； #该目录下存放所有的需要启动的微服务tar包/数据库脚本； #该目录下存放所有数据库相关的sql脚本及dmp包/nginx; #该目录下包括nginx组件与前端代码包/other; #该目录下为一些依赖服务的安装文件 部署依赖12#数据库： oracle, mysql, redis#基础服务： zookeeper, rocketmq 依赖搭建如果环境中已有相应的环境，可以略过相关步骤，无须重复部署 Oracle 基础数据导入1234567891011121314151617 #首先连接到oracle服务器，使用管理员用户登录，然后复制执行以下文件中的内容。创建相关表空间： 1.'/数据库脚本/oracle/base/BSCDATA-create-namespace.txt' 2.'/数据库脚本/oracle/base/synlte-create-namespace.txt'# 登录到oracle服务器，将以下文件传输到服务器中： 1.'/数据库脚本/oracle/base/synlte.dmp' 2.'/数据库脚本/oracle/base/BSCDATA.dmp'# 切换用户 su oracle# 进行基础数据导入： imp SYNLTE/SYNLTE file=/synlte.dmp touser=synlte fromuser=synlte (SYNLTE/SYNLTE 用户名/密码) imp BSCDATA/BSCDATA file=/BSCDATA.dmp touser=bscdata fromuser=bscdata- 业务表及数据导入 #首先连接到oracle服务器，使用管理员用户登录，然后复制执行以下文件中的内容。创建相关表空间： 1.'/数据库脚本/oracle/app/ALM_APPLICATION_SERVER/1-表空间/1-create_database_space_alm_application_server.sql' 2.'/数据库脚本/oracle/app/ALM_BASE_SERVER/1-表空间/1-create_database_space_alm_base_server.sql' 3.'/数据库脚本/oracle/app/ALM_CBB_SERVER/1-表空间/1-create_database_space_alm_cbb_server.sql' ##表创建完毕之后，可以使用navicat工具或者命令行，将'/数据库脚本/oracle/app/ALM_*_SERVER/2-表结构'目录下，执行在相应中执行数据库名对应的文件下的sql，导入表结构及数据，后复制txt中内容创建相应的视图 mysql注： 如果已有mysql，可以不用再安装，但是需要创建用户和数据库 从yum中安装mysql服务 1yum -y install mysql-server 修改Mysql配置 123456789101112131415161718192021222324252627##打开配置文件vim /etc/my.cnf##修改及添加以下参数(指定数据存储目录为"mysqlData")[client]port = 3306socket = &#123;mysqlData&#125;/mysql/mysql.sock[mysqld]skip-name-resolvedatadir=&#123;mysqlData&#125;/mysqlsocket=&#123;mysqlData&#125;/mysql/mysql.sockuser=mysql# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0lower_case_table_names=1 #允许mysql不区分大小写max_allowed_packet = 20M #每次写入的数据大小（默认1M）[mysqld_safe]log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid修改mysql启动文件/etc/rc.d/init.d/mysqld修改如下 get_mysql_option mysqld datadir "&#123;mysqlData&#125;/mysql"然后重新启动mysqld服务即可 初始化Mysql 1234567891011 ##初始化mysql root用户密码 mysqladmin -u root -p root ##登陆Mysql mysql -uroot -proot ##给root用户授权grant all privileges on *.* to 'root'@'localhost' identified by 'root' with grant option;grant all privileges on *.* to 'root'@'%' identified by 'root' with grant option;flush privileges;quit; 创建Mysql用户 1234567891011121314151617181920 ##登陆mysql mysql -uroot -proot ##创建hp_db数据库 create database hp_db DEFAULT CHARSET utf8 COLLATE utf8_general_ci; ##给hp_db授权 grant all privileges on *.* to 'hp_db'@'localhost' identified by '123456' with grant option; grant all privileges on *.* to 'hp_db'@'%' identified by '123456' with grant option; ##创建synlinketl数据库 create database oss DEFAULT CHARSET utf8 COLLATE utf8_general_ci; ##刷新权限flush privileges;##退出quit; ##表创建完毕之后，可以使用navicat工具或者命令行，将'/数据库脚本/mysql'目录下，执行在相应中执行数据库名对应的文件下的sql，导入表结构及数据 redis注： 如果已有redis，可以不用再安装 安装Jemalloc 将/other/redis/jemalloc-5.1.0.tar.bz2使用xshell等工具，传输到要部署Redis的机器上，例如：/home/synway/redis/jemalloc-5.1.0.tar.bz2 123456789101112131415##进入jemalloc包所在的目录cd /home/synway/redis##解压tar -xjvf jemalloc-5.1.0.tar.bz2##进入jemalloc目录cd jemalloc-5.1.0##执行以下编译安装命令./configure --prefix=/usr/local/jemalloc &amp;&amp; make &amp;&amp; make install##注意，如果此处提示没有gcc等命令，可以使用如下命令安装yum -y install gcc##然后再次执行上述编译安装命令##添加链接echo /usr/local/jemalloc/lib &gt;&gt; /etc/ld.so.conf##刷新库ldconfig 安装Redis 将/other/redis/redis-4.0.11.tar.gz使用xshell等工具，传输到将要部署Redis的机器中，例如：/home/synway/redis/redis-4.0.11.tar.gz 12345678910111213141516171819202122##进入redis包所在的目录cd /home/synway/redis解压tar -xzvf redis-4.0.11.tar.gz##进入redis目录cd redis-4.0.11##执行编译make##编译成功后，进入src目录，执行make install进行安装cd srcmake install##安装完成后，修改redis配置文件,使用vi或者vim等vim ../redis.conf##修改以下项bind 127.0.0.1 -&gt; bind 0.0.0.0 ##让其他机器可以访问daemonize no -&gt; daemonize yes ##redis作为守护线程dir ./ -&gt; dir &#123;redisData&#125; ##修改redis数据的存储位置protected-mode yes -&gt; protect-mode no ##redis安全模式port 6379 -&gt; port 7001 ##端口修改为7001##在安装目录启动redis./src/redis-server redis.conf jdk 上传JDK1.8 123##将部署包下的/other/jdk目录上传至各节点的/root目录下##解压jdk包tar -zxvf /root/jdk/jdk-8u161-linux-x64.tar.gz 安装JDK1.8 12345678910111213141516##需各节点执行##创建目录mkdir -p /usr/java##移动jdk目录mv -r /root/jdk/jdk1.8.0_161/ /usr/java/##设置环境变量vim /etc/profile.d/java.sh##在/etc/profile.d/java.sh文件编写以下内容后，保存并退出export JAVA_HOME=/usr/java/jdk1.8.0_161export PATH=$JAVA_HOME/bin:$PATH##使生效source /etc/profile.d/java.sh 卸载旧版本JDK 123456##因为其他节点没有安装过JDK，则只需在node1.stream.synway上执行即可##查找JDKrpm -aq|grep jdk##卸载JDKyum -y remove [上述查找结果的包名] zookeeper注： 如果已有zookeeper，可以不用再安装 准备 123456文件位于'部署/other/zookeeper/zookeeper-3.4.6.zip'以下以12.2.100.27, 12.2.100.28, 12.2.100.29为示例部署分布式zookeeper 机器IP与名称对应关系如下： 12.2.100.27 master 12.2.100.28 slave1 12.2.100.29 slave2 操作 123456789101112131415161718192021222324252627282930313233343536#12.2.100.27机器上进行如下操作;#创建文件目录mkdir /home/zookeepercd /home/master#放入zookeeper-3.4.6.zipunzip zookeeper-3.4.6.zip -C /home/zookeepercd ../zookeepermkdir zkdatatouch zkdata/myid #用于存储每个机器的标志mkdir zkdatalog #日志目录#进入zookeeper-3.4.6目录的conf目录下cd zookeeper-3.4.6/conf#复制一份样本配置文件cp zoo_sample.cfg zoo.cfgvim zoo.cfg#修改以下内容：tickTime=2000 #单位毫秒，服务器之间或者客户端与服务器之间的心跳间隔initLimit=10 #初始化Follower最长时间：10 * 2000 mssyncLimit=5 #Leader与Follower之间发送消息请求和应答时间长度：5 * 2000 msdataDir=/home/zookeeper/zkdata #日志存储路径dataLogDir=/home/zookeeper/zkdatalog #事务日志存储路径clientPort=2181 #客户端端口server.1=12.2.100.27:12888:13888 #server后面的1表示zookeeper集群间的标志，可自定义server.2=12.2.100.28:12888:13888 #server后面的2表示zookeeper集群间的标志，可自定义server.3=12.2.100.29:12888:13888 #server后面的3表示zookeeper集群间的标志，可自定义autopurge.snapRetainCount=15 #每次清除日志后保留的文件数目autopurge.purgeInterval=1 #清除日志频率，单位小时#退出保存 :wq!#因为本机地址为12.2.100.27 所以把"1"写进/home/zookeeper/zkdata/myid文件里echo "1" &gt; /home/zookeeper/zkdata/myid#2.28,2.29两台机器如同2.27机器，将12.2.100.27下解压配置过的/home/zookeeper同目录放置相同文件位置，同时修改/home/zookeeper/zkdata/myid里的内容，改为zookeeper集群间的标志（即conf目录下的zoo.cfg文件中的server.后面的那个数字）#3台服务器分别通过以下指令启动zookeeper程序Cd /home/zookeeper/zookeeper-3.4.6./zkServer.sh start #开启程序 ./zkServer.sh stop #关闭程序 rocketmq 准备 123456789101112131415161718 #将'部署/other/rocketmq/rocketmq.zip'放置到准备好的三台linux机器上； #解压文件 unzip rocketmq.zip -C /home/synway/ #以下以12.2.100.27, 12.2.100.28, 12.2.100.29为示例部署rocketmq 机器IP与名称对应关系如下： 12.2.100.27 rmq1 12.2.100.28 rmq2 12.2.100.29 rmq3# 在rmq1,rmq2,rmq3中，修改'alibaba-rocketmq/conf/2m-noslave/broker-a.properties broker-b.properties broker-c.properties' #对于'broker-a.properties'brokerIP1=17.22.52.1 -&gt; brokerIP1=12.2.100.27namesrvAddr=17.22.52.1:9876;17.22.52.3:9876;17.22.52.13:9876 -&gt; namesrvAddr=12.2.100.27:9876;12.2.100.28:9876;12.2.100.29:9876 #对于'broker-b.properties'brokerIP1=17.22.52.3 -&gt; brokerIP1=12.2.100.28namesrvAddr=17.22.52.1:9876;17.22.52.3:9876;17.22.52.13:9876 -&gt; namesrvAddr=12.2.100.27:9876;12.2.100.28:9876;12.2.100.29:9876 #对于'broker-c.properties'brokerIP1=17.22.52.13 -&gt; brokerIP1=12.2.100.29namesrvAddr=17.22.52.1:9876;17.22.52.3:9876;17.22.52.13:9876 -&gt; namesrvAddr=12.2.100.27:9876;12.2.100.28:9876;12.2.100.29:9876 启动 123#进入到程序的alibaba-rocketmq/bin目录下，分别使用如下命令启动nohup sh mqnamesrv &amp; #nameServer 启动脚本nohup sh mqbroker -c ../conf/2m-noslave/broker-b.properties nohup.out &amp; #broker启动脚本 主机配置因为目前微服务里面都是通过域名进行访问的，因此需要在每一台机器上配置域名映射域名及服务对应关系如下：| 域名 | 服务 || :——————–: | :————————————-: || mysql.synway.com | MySQL || synltedb.synway.com | oracle || redis.synway.com | redis || rmq1.synway.com | RocketMq\RocketMqAdmin\Zookeeper || rmq2.synway.com | RocketMq\Zookeeper || rmq3.synway.com | RocketMq\Zookeeper || portal.synway.com | Nginx\门户\CAS\预警前台应用 || gateway.synway.com | API网关\地图服务\认证中间件 || alarm.synway.com | 人员管控服务\规则预警服务\区域管控服务\时空追踪服务\推送服务(消息和规则) || alarmserver.synway.com | 对象服务\布控服务\规则服务\计算服务\GAW传输服务\接口服务 || registry.synway.com | 注册中心\配置中心\任务调度中心\公共服务\控制台 | 123#使用如下命令vi /etc/hosts# 将ip 域名对应关系写入，保存退出 Nginx 准备 1#将'部署/nginx'文件传输到 portal.synway.com 中的'/usr/local'下 启动 12345678910# 进入安装目录cd /usr/local/nginx/sbin# 启动./nginx# 重启./nginx -s reload# 判断配置文件是否正确./nginx -t 微服务启动 部署1# 首先将'部署/jar'下微服务安装包分别放到对应的服务器上的/home/synway/apps目录，每一个服务的启动都是类似的，注意，服务之间有依赖关系，因此微服务的启动最好依照以下的顺序: 服务名 所属服务器 对应jar名称 EUREKA注册名称 注册中心 registry.synway.com synway-eureka-server-prod.tar.gz （不显示）SYNWAY-EUREKA-SERVER 配置中心 registry.synway.com alarm-config-svc-1.0.0-prod.tar ALARM-CONFIG-SERVER 公共服务 registry.synway.com cbb-admin-container-0.0.1-prod.tar CBB-ADMIN-CONTAINER 公共服务 registry.synway.com cbb-function-container-0.0.1-prod.tar CBB-FUNCTION-CONTAINER API网关 gateway.synway.com alarm-gateway-1.0.0-prod.tar ALARM-GATEWAY 认证中间件 gateway.synway.com cas-md-server-1.0.0-prod.tar CAS-MD-SERVER 对象服务 alarmserver.synway.com alarm-object-svc-1.0.0-prod.tar ALARM-OBJECT-SVC 布控服务 alarmserver.synway.com alarm-control-svc-1.0.0-prod.tar ALARM-CONTROL-SVC 规则服务 alarmserver.synway.com alarm-rule-svc-1.0.0-prod.tar ALARM-RULE-SVC 推送服务(消息) alarm.synway.com alarm-message-push-svc-1.0.0-prod.tar ALARM-MESSAGE-PUSH-SVC 计算服务 alarmserver.synway.com alarm-compute-svc-1.0.0-prod.tar ALARM-COMPUTE-SVC 推送服务(规则) alarm.synway.com alarm-message-push-rule-result-1.0.0-prod.tar ALARM-MESSAGE-PUSH-RULE-RESULT-SVC GAW传输服务 alarmserver.synway.com alarm-file-task-svc-1.0.0-prod.tar ALARM-FILE-TASK-SVC GAW传输服务 alarmserver.synway.com alarm-rule-carry-svc-1.0.0-prod.tar ALARM-RULE-CARRY-SVC 接口服务 alarmserver.synway.com alarm-web-svc-1.0.0-prod.tar ALARM-WEB-SVC 人员管控服务 alarm.synway.com alarm-person-control-svc-1.0.0-prod.tar ALARM-PERSON-CONTROL-SVC 区域管控服务 alarm.synway.com alarm-area-control-svc-1.0.0-prod.tar ALARM-AREA-CONTROL-SVC 时空追踪服务 alarm.synway.com alarm-space-time-trace-svc-1.0.0-prod.tar ALARM-SPACE-TIME-TRACE-SVC 规则预警服务 alarm.synway.com alarm-rule-control-svc-1.0.0-prod.tar ALARM-RULE-CONTROL-SVC 任务调度中心 registry.synway.com alarm-task-center-1.0.0-prod.tar ALARM-TASK-CENTER 控制台 registry.synway.com alarm-admin-svc-1.0.0-prod.tar ALARM-ADMIN-SVC 123456#下面以eureka启动为例：# 在registry.synway.com这台服务器上，到安装包的位置cd /home/synway/appstar -xzvf synway-eureka-server-prod.tar.gz #对于tar包，使用tar -xvf xx.tar解压# 进入启动目录cd synway-eureka-server/bin/ 在JZ侧，机器jdk版本默认非1.8，因此需要指定jdk版本启动程序 123456789101112# 修改start.sh# 即将脚本中的 java 命令的路径写完全，形如： /home/synway/apps/jdk1.8/jdk1.8.0_161/bin/java# 并且，stop命令中的jps命令: /home/synway/apps/jdk1.8/jdk1.8.0_161/bin/jpssed -i 's/\r$//' *.sh# 启动./start.sh# 启动完毕后，可以在以下目录查看日志/home/synway/logs/alarm-v3/&#123;服务名&#125;/instance_1/&#123;服务名&#125;.log# 服务全部启动完成后，可以访问以下网址，查看所有服务的状态http://registry.synway.com:9501/]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
